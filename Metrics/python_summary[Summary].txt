-sys.maxint - 1
sys.maxsize  3.0 use maxsize

 (1<<31) - 1
2147483647L
-1<<31

*
http://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php
try:
    import Queue as Q  # ver. < 3.0
except ImportError:
    import queue as Q

class Skill(object):
    def __init__(self, priority, description):
        self.priority = priority
        self.description = description
        print 'New Level:', description
        return
    def __cmp__(self, other):
        return cmp(self.priority, other.priority)

q = Q.PriorityQueue()

q.put(Skill(5, 'Proficient'))
q.put(Skill(10, 'Expert'))
q.put(Skill(1, 'Novice'))

while not q.empty():
    next_level = q.get()
    print 'Processing level:', next_level.description
    *found = x in somelist
If you do care, then use a LBYL style with a conditional expression:

i = somelist.index(x) if x in somelist else None

*bisect
s
um: bisect_right(breakpoints,k ) return index greater than the rightest one if it exist, out of bound, -1 would return the exist one if exist
 if return 0, means 50 < 60; if 60 return 1 for [60, 70,80,90,90]; search 90 or 91, rturn 5

bisect_left, return the leftest one just , +1 possiblly still duplicate . for above example, left 91 or 100 return 5, but 90 return 3, 50 60, return 0;return > len, means not exist, however not the case for right search
return 0 means <= lowest, but for right, 0 alwasys mean less

bisect.bisect_left(a, x, lo=0, hi=len(a))
Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If x is already present in a, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.

The returned insertion point i partitions the array a into two halves so that all(val < x for val in a[lo:i]) for the left side and all(val >= x for val in a[i:hi]) for the right side.

bisect.bisect_right(a, x, lo=0, hi=len(a))
bisect.bisect(a, x, lo=0, hi=len(a))
Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a.

The returned insertion point i partitions the array a into two halves so that all(val <= x for val in a[lo:i]) for the left side and all(val > x for val in a[i:hi]) for the right s
>>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
        i = bisect(breakpoints, score)
        return grades[i]

>>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
['F', 'A', 'C', 'C', 'B', 'A', 'A']
Unlike the sorted() function, it does not make sense for the bisect() functions to have key or reversed arguments because that would lead to an inefficient design (successive calls to bisect functions would not “remember” all of the previous key lookups).

Instead, it is better to search a list of precomputed keys to find the index of the record in question:

>>>
>>> data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
>>> data.sort(key=lambda r: r[1])
>>> keys = [r[1] for r in data]         # precomputed list of keys
>>> data[bisect_left(keys, 0)]
('black', 0)


*
>>>'-6'.lstrip('-')
'6'
>>>'-6'.lstrip('-').isdigit()
True
You can lstrip('+-') if you want to consider +6 a valid digit.

But I wouldn't use isdigit, you can try int(question), it'll throw an exception if the value cannot be represented as int:

try:
    int(question)
except ValueError:
    # not int
* alphanumeric 
isalpha
isalnum
isdigit
#  carry, rem = divmod(curval + carry, 2)
        res = `rem` + res divmod(5,2)
* char to int : ord to ascii, chr 
*>>> random.randint(1, 10)  # Integer from 1 to 10, endpoints included
7
>>> random.randrange(0, 101, 2)  # Even integer from 0 to 100
26
>>> random.choice('abcdefghij')  # Choose a random element
'c'

>>> items = [1, 2, 3, 4, 5, 6, 7]
>>> random.shuffle(items)
>>> items
[7, 3, 2, 5, 6, 4, 1]

>>> random.sample([1, 2, 3, 4, 5],  3) 

The defaultdict constructor takes a function as a parameter and constructs a value using that function.
but dict have to check beofore access it
lambda: None
lambda: 1
is the same as the parameterless function f that does this

def f():
 return 1

setdefault('a', []).append(1) if 'a' not exist, set to default [] and then append, similar to get

for key in dict.iterkeys(): ...

for value in dict.itervalues(): ...  not itervalues #Mistake
leetcode support both 2 and 3 version methods, groupAnagrams error testcases

for key, value in dict.iteritems(): ...
This means that for x in dict is shorthand for for x in
   dict.iterkeys().
   	
In python3 dict.iterkeys(), dict.itervalues() and dict.iteritems() are no longer supported. U
se dict.keys(), dict.values() and dict.items()
*
namedtuple()	factory function for creating tuple subclasses with named fields
deque	list-like container with fast appends and pops on either end
ChainMap	dict-like class for creating a single view of multiple mappings
Counter	dict subclass for counting hashable objects
OrderedDict	dict subclass that remembers the order entries were added
defaultdict	dict subclass that calls a factory function to supply missing values
>>> s = 'mississippi'
>>> d = defaultdict(int)
>>> for k in s:
...     d[k] += 1
...
>>> d.items()
[('i', 4), ('p', 2), ('s', 4), ('m', 1)
> d = defaultdict(list)
>>> for k, v in s:
...     d[k].append(v)
..efault_factory to int makes the defaultdict useful for counting (like a bag or multiset in other languages):

UserDict	wrapper around dictionary objects for easier dict subclassing
UserList	wrapper around list objects for easier list subclassing
UserString	wrapper around string objects for easier string subclassing

https://docs.python.org/3/library/collections.html

*ass collections.OrderedDict([items])
Return an instance of a dict subclass, supporting the usual dict methods. An OrderedDict is a dict that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.

New in version 2.7.

OrderedDict.popitem(last=True)
The popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.

In addition to the usual mapping methods, ordered dictionaries also support reverse iteration using reversed().
* collections.Counter([iterable-or-mapping])
A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.

Elements are counted from an iterable or initialized from another mapping (or counter):

>>>
>>> c = Counter()                           # a new, empty counter
>>> c = Counter('gallahad')                 # a new counter from an iterable
>>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping
>>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args
Counter objects have a dictionary interface except that they return a zero count for missing items instead of raising a KeyError:

>>>

>>> c = Counter(['eggs', 'ham'])
>>> c['bacon']                              # count of a missing element is zero
0
Setting a count to zero does not remove an element from a counter. Use del to remove it entirely:

>>>
>>> c['sausage'] = 0                        # counter entry with a zero count
>>> del c['sausage']                        # del actually removes the entry

  * Not camel case but this : OrderedDict


  i+=1; j+=1
            str[end], str[start] = str[start] , str[end]


list.append(x)
Add an item to the end of the list; equivalent to a[len(a):] = [x].

list.extend(L)
Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L
list.insert(i, x)
index(x)
list.sort(cmp=None, key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
append is a destructive operation (it modifies the list in place instead of of returning a new list). The idiomatic way to do the non-destructive equivalent of append would be
> from collections import deque
input of deque needs to be an interable, like init to deque([root])
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves
l = [1,2,3]
print l + [4] # [1,2,3,4]
Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.
 is a convention in Python that methods that mutate sequences return None.

Consider:

>>> a_list = [3, 2, 1]
>>> print a_list.sort()
None
>>> a_list
[1, 2, 3]

>>> a_dict = {}
>>> print a_dict.__setitem__('a', 1)
None
>>> a_dict
{'a': 1}

>>> a_set = set()
>>> print a_set.add(1)
None
>>> a_set
set([1])
 >> res=[]
>>> list=[]
>>> res.append(list.append(1))
>>> res
[None]

>>> res.append(list+[1])
>>> res
[[1]]
 
 try 
             raise GetOutOfLoop
        # other stuff
except GetOutOfLoop:
    pass


''.join(p[:i]+'{}'+p[i:])
Python
http://www.diveintopython.net/power_of_introspection/optional_arguments.html
Example 4.4. Valid Calls of info
info(odbchelper)                    1
info(odbchelper, 12)                2
info(odbchelper, collapse=0)        3
info(spacing=15, object=odbchelper) 4
1	With only one argument, spacing gets its default value of 10 and collapse gets its default value of 1.
2	With two arguments, collapse gets its default value of 1.
3	Here you are naming the collapse argument explicitly and specifying its value. spacing still gets its default value of 10.
4	Even required arguments (like object, which has no default value) can be named, and named arguments can appear in any order.


# type annotations:
# reduce(lambda X,X:X, [X,X..]) -> X

#        SAME  <-- result
#          ↗ ↖
#      SAME   SAME]
#        ↗ ↖
#    SAME   SAME,
#      ↗ ↖
# [SAME,  SAME,

>>> reduce(lambda a,b:[a,b], [1,2,3,4])
[[[1, 2], 3], 4]

list( filter((lambda x: x < 0), range(-5,5)))
list(map((lambda x: x **2), items))
http://www.bogotobogo.com/python/python_fncs_map_filter_reduce.php
>>> items = [1, 2, 3, 4, 5]
>>> 
>>> def sqr(x): return x ** 2
>>> import functools, operator
>>> functools.reduce(operator.add, L)
'Testing shows the presence, not the absence of bugs'
>>> 
>>> list(map(sqr, items))
[1, 4, 9, 16, 25]
>>> 
>>> def reverse_numeric(x, y):
...     return y - x
>>> sorted([5, 2, 4, 1, 3], cmp=reverse_numeric) 
That function should take two arguments to be compared and then return a negative value for less-than, return zero if they are equal, or return a positive value for greater-than. For example, we can do:
sorted([5, 2, 4, 1, 3], key=cmp_to_key(reverse_numeric))

>>> Student.__lt__ = lambda self, other: self.age < other.age
>>> sorted(student_objects)
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
Key functions need not depend directly on the objects being sorted. A key function can also access external resources. For instance, if the student grades are stored in a dictionary, they can be used to sort a separate list of student names:

>>>
>>> students = ['dave', 'john', 'jane']
>>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}
>>> sorted(students, key=newgrades.__getitem__)
['jane', 'dave', 'john']


https://briangordon.github.io/2014/08/the-skyline-problem.html

t = defaultdict(lambda:0) , ht = defaultdict(int) or ht = defaultdict(lambda:0, ht)

9223372036854775807
And you can calculate the minimum value with -sys.maxint - 1 as seen here. Of course Python just switches from plain to long integers once you exceed this value.
In Python 3 this value has no significance at all for integers. (However, a closely related value is still available as sys.maxsize, in case you're actually looking for the machine's word size.)

From <http://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints> 
u're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, even though Python will jump to 64-bit seamlessly with the long datatype.

From <http://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints> 


In Python we could do as follows:
# regular list comprehension
>>> a = [(x, y) for x in range(1, 6) for y in range(3, 6)]
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), ...

# parallel/zipped list comprehension
>>> b = [x for x in zip(range(1, 6), range(3, 6))]
[(1, 3), (2, 4), (3, 5)]

-- regular list comprehension
a = [(x,y) | x <- [1..5], y <- [3..5]]
-- [(1,3),(1,4),(1,5),(2,3),(2,4) ...

-- zipped list comprehension
b = [(x,y) | (x,y) <- zip [1..5] [3..5]]
-- [(1,3),(2,4),(3,5)]

-- parallel list comprehension
c = [(x,y) | x <- [1..5] | y <- [3..5]]
-- [(1,3),(2,4),(3,5)]

>>> s = {v for v in 'ABCDABCD' if v not in 'CB'}
>>> print(s)
{'A', 'D'}
>>> type(s)
<class 'set'>
>>>

>> import numpy
>>> numpy.zeros((5, 5))
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> numpy.matrix([[1, 2],[3, 4]])
matrix([[1, 2],
        [3, 4]])
Other ways (with output removed for compactness):

>>> numpy.matrix('1 2; 3 4')
>>> numpy.arange(25).reshape((5, 5))
>>> numpy.array(range(25)).reshape((5, 5))
>>> numpy.ndarray((5, 5
hen you can also do import collections; Matrix = collections.defaultdict(float), to substitute zeros for uninitialized elements. – osa Oct 22 '15 at 16:17
  	 	
Wouldn't accessing a dict for tuple(1,2) as key have a worst case complexity of O(n). As internally it would hash the tuples. Whereas using an 2D array would give O(1) time complexity to access index [1,2] access . So using dict for this should not be good choice. – Vatsal Nov 16 '15 at 12:25 
  	 	
@Vatsal wiki.python.org/moin/TimeComplexity says that the average case is O(1), but you're right about the worst case. Anyway, unless you're talking about A LOT OF ITEMS you wouldn't care about this difference. As a matter of fact, I would be worried more about memory than access time. – enobayram Nov 16 '15 at 13:38
  	 	
Also we always try to avoid use of dicts until the overall complexity of the algorithm is equal or greater than O(n^2). As an 'n' times O(n) accesses would give a O(n^2) complexity. – Vatsal Nov 16 '15 at 14:28
  	 	
@enobayram , Sorry but I do not agree. Asymptotic analysis will always give O(n^2) , if a worst case O(n) access is done 'n' times. Where as Amortized analysis can give a lesser bound. And there is a huge difference between amortized and average case ... please refer before making any assumptions and vague comments – Vatsal Nov 17 '15 at 4:10 
  	 	
I use this variant extensively for sparse matrices. Being able to Matrix = collections.defaultdict(lambda:0) is very useful in let's say, incrementing items in a matrix. – Josep Valls Dec 16 '15 at 15:51
Matrix = {}
Then you can do:

Matrix[1,2] = 15
print Matrix[1,2]

atrix = []
matrix.append([])
matrix.append([])
matrix[0].append(2)
matrix[1].append(3)
Now matrix[0][0] == 2 and matrix[1][0] == 3. You can also use the list comprehension syntax. This example uses it twice over to build a "two-dimensional list":
numpy.zeros((x, y))
e.g.

>>> numpy.zeros((3, 5))
    array([[ 0.,  0.,  0.,  0.,  0.],
   [ 0.,  0.,  0.,  0.,  0.],
   [ 0.,  0.,  0.,  0.,  0.]])
or numpy.ones((x, y)) e.g.

>>> np.ones((3, 5))
array([[ 1.,  1.,  1.,  1.,  1.],
   [ 1.,  1.,  1.,  1.,  1.],
   [ 1.,  1.,  1.,  1.,  1.]])

>> test = "abcba"
>>> test == ''.join(reversed(test))

def palindrome(n):
    return n == n[::-1]